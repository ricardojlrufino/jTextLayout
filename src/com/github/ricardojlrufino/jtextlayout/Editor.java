/*
 * The MIT License
 *
 * Copyright 2018 Ricardo JL Rufino.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.github.ricardojlrufino.jtextlayout;

import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.UIManager;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Element;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.text.Utilities;

/**
 * @author Ricardo JL Rufino
 */
public class Editor extends javax.swing.JFrame {

    private static final Logger log = Logger.getLogger(Editor.class.getName());

    private File currentFile;
    
    /**
     * Creates new form Editor
     */
    public Editor() {
        initComponents();
        editor.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
        openFile(new File("/media/ricardo/Dados/TEMP/Retorno/remir/CB070200CC37.RET"));
        trackCursor();
        setupEditorShorcuts();
        findPanel.setVisible(false);
        findPanel.setTextPane(editor);
        
    }

    private void setupEditorShorcuts() {
        Action action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openSearch();
            }
        };
        
        String keyStrokeAndKey = "control + F";
        KeyStroke keyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_F, KeyEvent.CTRL_DOWN_MASK);
        
        editor.getInputMap().put(keyStroke, keyStrokeAndKey);
        editor.getActionMap().put(keyStrokeAndKey, action);
    }
    private void openSearch(){
        findPanel.activate();
    }
    /*
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        tfDestaqueInicio = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfDestaqueFim = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jLabel3 = new javax.swing.JLabel();
        tfDestaqueCondicao = new javax.swing.JTextField();
        btnDestaque = new javax.swing.JButton();
        centerPanel = new javax.swing.JPanel();
        statusPanel = new javax.swing.JPanel(new FlowLayout(FlowLayout.LEFT));
        jLabel4 = new javax.swing.JLabel();
        labelLinha = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        labelColuna = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        labelTextInfo = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        editor = new com.github.ricardojlrufino.jtextlayout.ui.NoWrapTextPane();
        findPanel = new com.github.ricardojlrufino.jtextlayout.ui.FindPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArquivo = new javax.swing.JMenu();
        menuOpen = new javax.swing.JMenuItem();
        menuBusca = new javax.swing.JMenu();
        menuSearch = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("jTextLayout");
        setMinimumSize(new java.awt.Dimension(700, 500));

        jToolBar1.setRollover(true);

        jLabel1.setText("Destacar Colunas:");
        jToolBar1.add(jLabel1);

        tfDestaqueInicio.setColumns(3);
        tfDestaqueInicio.setText("22");
        tfDestaqueInicio.setMinimumSize(new java.awt.Dimension(100, 27));
        jToolBar1.add(tfDestaqueInicio);

        jLabel2.setText(":");
        jToolBar1.add(jLabel2);

        tfDestaqueFim.setColumns(3);
        tfDestaqueFim.setText("25");
        jToolBar1.add(tfDestaqueFim);
        jToolBar1.add(jSeparator1);

        jLabel3.setText("Linhas começando com:");
        jToolBar1.add(jLabel3);

        tfDestaqueCondicao.setColumns(10);
        tfDestaqueCondicao.setText("1");
        jToolBar1.add(tfDestaqueCondicao);

        btnDestaque.setText("Aplicar");
        btnDestaque.setFocusable(false);
        btnDestaque.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDestaque.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDestaque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDestaqueActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDestaque);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        centerPanel.setBorder(null);
        centerPanel.setLayout(new java.awt.BorderLayout());

        statusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setText("Linha:");
        statusPanel.add(jLabel4);

        labelLinha.setText("X");
        statusPanel.add(labelLinha);

        jLabel6.setText("Coluna:");
        statusPanel.add(jLabel6);

        labelColuna.setText("Y");
        statusPanel.add(labelColuna);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        statusPanel.add(jSeparator2);

        jLabel5.setText("Info:");
        statusPanel.add(jLabel5);

        labelTextInfo.setText("--");
        statusPanel.add(labelTextInfo);

        centerPanel.add(statusPanel, java.awt.BorderLayout.PAGE_END);

        editor.setMinimumSize(new java.awt.Dimension(700, 450));
        jScrollPane2.setViewportView(editor);

        centerPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);
        centerPanel.add(findPanel, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        menuArquivo.setText("Arquivo");

        menuOpen.setText("Abrir");
        menuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenActionPerformed(evt);
            }
        });
        menuArquivo.add(menuOpen);

        jMenuBar1.add(menuArquivo);

        menuBusca.setText("Editar");

        menuSearch.setText("Buscar");
        menuSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSearchActionPerformed(evt);
            }
        });
        menuBusca.add(menuSearch);

        jMenuBar1.add(menuBusca);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDestaqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDestaqueActionPerformed
        int coluna = getIntValue(tfDestaqueInicio);
        int colunaFim = getIntValue(tfDestaqueFim);
        if (coluna > 0 && colunaFim > 0) {
            addHighlight(tfDestaqueCondicao.getText(), coluna, colunaFim - coluna);
        }
    }//GEN-LAST:event_btnDestaqueActionPerformed

    private void menuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenActionPerformed
    final JFileChooser fc = new JFileChooser();
        if (currentFile != null) {
            fc.setCurrentDirectory(currentFile.getParentFile());
        }
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            openFile(fc.getSelectedFile());
        }
    }//GEN-LAST:event_menuOpenActionPerformed

    private void menuSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSearchActionPerformed
        openSearch();
    }//GEN-LAST:event_menuSearchActionPerformed

    private int getIntValue(JTextField field) {
        String text = field.getText();
        try {
            return Integer.parseInt(text);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Informe um valor numérico");
            return -1;
        }
    }

    private void openFile(File file) {
        log.fine("Opening: " + file.getName());
        currentFile = file;
        try {
            editor.read(new FileReader(file), file.getName());
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void addHighlight(String startWith, int targetCol, int targetWidth) {
        BufferedReader reader = null;
        try {

            int cpos = 0;
            List<Integer> targets = new LinkedList<Integer>();
            reader = new BufferedReader(new FileReader(currentFile));
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.startsWith(startWith)) {
                    targets.add(cpos + targetCol);
                }
                cpos += line.length() + 1;
            }
            StyledDocument document = (StyledDocument) editor.getDocument();
            for (int col : targets) {
                SimpleAttributeSet sas = new SimpleAttributeSet();
                StyleConstants.setBackground(sas, Color.YELLOW);
                sas.addAttribute("colName", "Block Text " + targetCol + " - " + (targetCol + targetWidth));
                document.setCharacterAttributes(col, targetWidth, sas, true);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                reader.close();
            } catch (IOException ex) {
                Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void trackCursor() {
        editor.addCaretListener(new CaretListener() {
            public void caretUpdate(CaretEvent e) {
                labelLinha.setText(Integer.toString(getCaretLinePosition()));
                labelColuna.setText(Integer.toString(getCaretColumnPosition()));

                StyledDocument document = (StyledDocument) editor.getDocument();
                Element characterElement = document.getCharacterElement(editor.getCaretPosition());
                AttributeSet attributeNew = characterElement.getAttributes();
                Object attribute = attributeNew.getAttribute("colName");

                if (attribute != null) {
                    labelTextInfo.setText(attribute.toString());
                } else {
                    labelTextInfo.setText("");
                }
            }

            private int getCaretLinePosition() {
                int caretPosition = editor.getCaretPosition();
                Element root = editor.getDocument().getDefaultRootElement();
                return root.getElementIndex(caretPosition) + 1;
            }

            private int getCaretColumnPosition() {
                int offset = editor.getCaretPosition();
                int column;
                try {
                    column = offset - Utilities.getRowStart(editor, offset);
                } catch (BadLocationException e) {
                    column = -1;
                }
                return column;
            }
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDestaque;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JTextPane editor;
    private com.github.ricardojlrufino.jtextlayout.ui.FindPanel findPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel labelColuna;
    private javax.swing.JLabel labelLinha;
    private javax.swing.JLabel labelTextInfo;
    private javax.swing.JMenu menuArquivo;
    private javax.swing.JMenu menuBusca;
    private javax.swing.JMenuItem menuOpen;
    private javax.swing.JMenuItem menuSearch;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTextField tfDestaqueCondicao;
    private javax.swing.JTextField tfDestaqueFim;
    private javax.swing.JTextField tfDestaqueInicio;
    // End of variables declaration//GEN-END:variables
}
