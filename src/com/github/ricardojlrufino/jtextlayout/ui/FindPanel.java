/*
 * The MIT License
 *
 * Copyright 2018 ricardo.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.github.ricardojlrufino.jtextlayout.ui;

import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Element;

/**
 *
 * @author ricardo
 */
public class FindPanel extends javax.swing.JPanel implements ActionListener {

    private JTextPane jTextPane;

    private String lastText = null;
    private int findPosn = 0;

    /**
     * Creates new form FindPanel
     */
    public FindPanel() {
        initComponents();
        btnCancel.addActionListener(this);
        btnFindNext.addActionListener(this);
        btnFindPrev.addActionListener(this);
    }

    /**
     * * finds next occurrence of text in a string
     *
     * @param find the text to locate in the string
     */
    public void doFindText(String find) {
        int nextPosn = 0;
        if (!find.equals(lastText)) // *** new find word 
        {
            findPosn = 0; // *** start from top 
        }
        nextPosn = nextIndex(jTextPane.getText(), find, findPosn, false);

        if (nextPosn >= 0) {
            int l = getLineNumber(jTextPane, nextPosn + 1); // to remove line break
            System.out.print("Line:"+l+"|");
            jTextPane.select(nextPosn - l, nextPosn + find.length() - l + 1);
            findPosn = nextPosn + find.length() + 1; // reset for next search 
            lastText = find; // save word & case 
        } else {
            findPosn = nextPosn; // set to -1 if not found 
            JOptionPane.showMessageDialog(null, find + " not Found!");
        }
    }

    public int getLineNumber(JTextPane component, int pos) {
        Element root = component.getDocument().getDefaultRootElement();
        return root.getElementIndex(pos) + 1;
//        int posLine;
//        int y = 0;
//
//        try {
//            Rectangle caretCoords = component.modelToView(pos);
//            y = (int) caretCoords.getY();
//        } catch (BadLocationException ex) {
//        }
//
//        int lineHeight = component.getFontMetrics(component.getFont()).getHeight();
//        posLine = (y / lineHeight) + 1;
//        return posLine;
    }

    /**
     * returns next posn of word in text - forward search
     *
     * @return next indexed position of start of found text or -1
     * @param input the string to search
     * @param find the string to find
     * @param start the character position to start the search
     * @param caseSensitive true for case sensitive. false to ignore case
     */
    public int nextIndex(String input, String find, int start, boolean caseSensitive) {
        int textPosn = -1;
        if (input != null && find != null && start < input.length()) {
            if (caseSensitive == true) { // indexOf() returns -1 if not found 
                textPosn = input.indexOf(find, start);
            } else {
                textPosn = input.toLowerCase().indexOf(find.toLowerCase(),start);
            }
        }
        return textPosn;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfText = new javax.swing.JTextField();
        btnFindPrev = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnFindNext = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tfText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfTextActionPerformed(evt);
            }
        });

        btnFindPrev.setText("Anterior");
        btnFindPrev.setActionCommand("FindPrev");
        btnFindPrev.setEnabled(false);

        btnCancel.setText("X");
        btnCancel.setActionCommand("Cancel");

        btnFindNext.setText("Buscar");
        btnFindNext.setActionCommand("FindNext");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tfText, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFindNext)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFindPrev)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(tfText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnFindPrev)
                .addComponent(btnCancel)
                .addComponent(btnFindNext))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tfTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfTextActionPerformed
        doFindText(tfText.getText());
    }//GEN-LAST:event_tfTextActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnFindNext;
    private javax.swing.JButton btnFindPrev;
    private javax.swing.JTextField tfText;
    // End of variables declaration//GEN-END:variables

    
    public void activate(){
        setVisible(true);
        tfText.requestFocus();
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand() == "Cancel") {
            this.setVisible(false);
            findPosn = 0; // *** start from top 
            lastText = null;
        } else if (e.getActionCommand() == "FindNext") {
            doFindText(tfText.getText());
        }
    }

    public void setTextPane(JTextPane jTextPane) {
        this.jTextPane = jTextPane;
    }
    
}
